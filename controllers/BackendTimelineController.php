<?php

namespace QQ\Module\Viettel1\Controller;

use Phalcon\Di\Service;
use QQ\Core\Model\Services\Service\Workflow;
use QQ\Module\Viettel1\Model\TimelineEntity;
use QQ\Module\Viettel1\Model\Services\Service\Timeline;

class BackendTimelineController extends ControllerBase
{
    private $timeline_service;
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this-> timeline_service = new Timeline();
    }

    public function indexAction()
    {
        echo "hi hi hi";
        exit();
    }
    public function saveAction(){

        $uuid = $this->request->getPost('uuid');
        $data = json_decode($this->request->getPost('data'));
        $workflow = json_decode($this->request->getPost('workflow'));

        $m = new TimelineEntity();
        $m->assign(array(
            'uuid'  => $uuid,
            'data'  => $data
        ));
        if($m->save()){
            echo json_encode(
                array(
                    'success'   => true
                )
            );
        }else{
            echo json_encode(
                array(
                    'success'   => false
                )
            );
        }


        exit();
    }

    public function searchAction(){
        $this->view->disable();
        $r = $this->request;

        $order = $r->getQuery('order') ?: 'asc';
        $page_size = $r->getQuery('page_size') ?: 30;
        $page_number = $r->getQuery('page_number') ?: 1;
        $lang = $r->getQuery('lang') ?: 'vi';

        $items=array();

        if(empty($query)) {
            $filter = array(
                'order' => $order,
                'page_size' => $page_size,
                'page_number' => $page_number,
                'lang'=>$lang,
            );
        }

        $rs = $this->timeline_service->filter($filter);

        foreach ($rs as $item){
            $items[]=array(
                'uuid' => $item->uuid,
                'data' => $item->data,
            );
        }
        echo json_encode(array(
            'success' => true,
            'items' => $items,
        ));

        exit();

    }
    public function listAction(){

        $this->view->disable();
        $r = $this->request;

        $order = $r->getQuery('order') ?: 'asc';
        $page_size = $r->getQuery('page_size') ?: 30;
        $page_number = $r->getQuery('page_number') ?: 1;
        $lang = $r->getQuery('lang') ?: 'vi';

        $items=array();

        if(empty($query)) {
            $filter = array(
                'order' => $order,
                'page_size' => $page_size,
                'page_number' => $page_number,
                'lang'=>$lang,
            );
        }

        $rs = $this->timeline_service->filter($filter);

        foreach ($rs as $item){
            $items[]=array(
                'uuid' => $item->uuid,
                'data' => $item->data,
            );
        }
        echo json_encode(array(
            'success' => true,
            'items' => $items,
        ));

        exit();
    }

    public function removeAction(){
        $this->view->disable();
        $uuid = $this->request->getPost('uuid');
        echo $uuid;
        var_dump($uuid);
        try{
            $timeline = $this->timeline_service->getFirstByUuid($uuid);
            if($timeline->delete()){
                echo json_encode(array(
                    'success'   => true
                ));
                exit();
            }
            else echo "false";
        }catch(Exceptions\EntityNotFoundException $e){

        }

        echo json_encode(array(
            'success'   => false
        ));
        exit();
    }

}
